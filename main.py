import logging
from datetime import datetime, timedelta, time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext, ConversationHandler

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "7572990762:AAEv_Zjk1NK8FMJtwz2s42usKSn42y8zXA0"

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
ASK_WAKE, ASK_SLEEP = range(2)

# === –°–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_data = {}

# === –°—Ç–∞—Ä—Ç ===
def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_data[user_id] = {
        "wake": None,
        "sleep": None,
        "last_done": None,
    }
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! üèãÔ∏è‚Äç‚ôÄÔ∏è –í–æ —Å–∫–æ–ª—å–∫–æ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è? (–ù–∞–ø—Ä–∏–º–µ—Ä, 07:30)")
    return ASK_WAKE

# === –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è ===
def ask_wake(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        wake_time = datetime.strptime(update.message.text, "%H:%M").time()
        user_data[user_id]["wake"] = wake_time
        update.message.reply_text("–ê –≤–æ —Å–∫–æ–ª—å–∫–æ –ª–æ–∂–∏—à—å—Å—è —Å–ø–∞—Ç—å? (–ù–∞–ø—Ä–∏–º–µ—Ä, 22:30)")
        return ASK_SLEEP
    except:
        update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:00.")
        return ASK_WAKE

# === –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Å–Ω–∞ ===
def ask_sleep(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    try:
        sleep_time = datetime.strptime(update.message.text, "%H:%M").time()
        user_data[user_id]["sleep"] = sleep_time
        update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∫–∞–∂–¥—ã–π —á–∞—Å üí™")
        return ConversationHandler.END
    except:
        update.message.reply_text("–§–æ—Ä–º–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ß–ß:–ú–ú. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return ASK_SLEEP

# === –ö–Ω–æ–ø–∫–∞ "–Ø –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è" ===
def send_workout_button(context: CallbackContext):
    for user_id, data in user_data.items():
        now = datetime.now()
        today = now.date()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ä–µ–º—è –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –±–æ–¥—Ä—Å—Ç–≤–æ–≤–∞–Ω–∏—è
        wake = data.get("wake")
        sleep = data.get("sleep")
        last_done = data.get("last_done")

        if not wake or not sleep:
            continue

        current_time = now.time()

        if wake <= current_time <= sleep:
            if last_done != today:
                # –í—ã–±–æ—Ä —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
                hour = now.hour
                if 5 <= hour < 12:
                    text = "‚òÄ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –ü–æ—Ä–∞ —Ä–∞–∑–º—è—Ç—å —Å–≤–æ–∏ –∫–æ—Å—Ç–æ—á–∫–∏!"
                elif 12 <= hour < 18:
                    text = "üèÉ‚Äç‚ôÄÔ∏è –£–∂–µ –¥–µ–Ω—å, –∞ —Ç—ã –≤—Å—ë –µ—â—ë –Ω–µ –¥–≤–∏–≥–∞–ª—Å—è. –í–ø–µ—Ä—ë–¥ –∑–∞ –¥–≤–∏–∂–µ–Ω–∏–µ–º!"
                else:
                    text = "üåô –£–∂–µ –≤–µ—á–µ—Ä... –ø–æ—Ä–∞ —Ä–∞–∑–º—è—Ç—å—Å—è –ø–µ—Ä–µ–¥ —Å–Ω–æ–º."

                keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª—Å—è!", callback_data="workout_done")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                context.bot.send_message(chat_id=user_id, text=text, reply_markup=reply_markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ===
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    today = datetime.now().date()

    if user_data[user_id]["last_done"] == today:
        query.edit_message_text("–¢—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è ‚úÖ")
    else:
        user_data[user_id]["last_done"] = today
        query.edit_message_text("üî• –ú–æ–ª–æ–¥–µ—Ü! –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞!")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ ===
def error(update, context):
    print(f"–û—à–∏–±–∫–∞: {context.error}")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
def main():
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_WAKE: [MessageHandler(Filters.text & ~Filters.command, ask_wake)],
            ASK_SLEEP: [MessageHandler(Filters.text & ~Filters.command, ask_sleep)],
        },
        fallbacks=[],
    )

    dp.add_handler(conv_handler)
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_error_handler(error)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    job_queue = updater.job_queue
    job_queue.run_repeating(send_workout_button, interval=3600, first=10)  # –∫–∞–∂–¥—ã–π —á–∞—Å

    # –ó–∞–ø—É—Å–∫
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()

